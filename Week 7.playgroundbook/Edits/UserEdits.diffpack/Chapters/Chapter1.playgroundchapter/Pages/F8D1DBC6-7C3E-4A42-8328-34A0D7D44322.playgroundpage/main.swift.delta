<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation
import Combine
import SwiftUI
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

class ImageLoader:  ObservableObject {
    var didChange = PassthroughSubject&lt;Data, Never&gt;()
    var data = Data() {
        didSet {
            didChange.send(data)
        }
    }
    // The code below downloads an image from the popular blog Swift by Sundell
    // Using DispatchQueue.
    // Your task is to modify the code to use OperationQueue.
    init(urlString:String) {
        guard let url = URL(string: urlString) else { return }
        let queue = OperationQueue()
        let op = ImageLoadOpretion(url: url)
        op.completionBlock = { [self] in        
            if let imageData = op.data { data = imageData  }
        }
        queue.addOperation(op)
    }
}


class ImageLoadOpretion: AsyncOperation {
    private let url: URL
    var data: Data?
    // The code below downloads an image from the popular blog Swift by Sundell
    // Using DispatchQueue.
    // Your task is to modify the code to use OperationQueue.
    
    init(url:URL) {
        self.url = url
        super.init()
    }
    override func main() {
        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
            guard let self = self else { return }
            defer { self.state = .finished }
            guard error == nil, let data = data else { return }
            self.data = data
            print("Image data Downloaded \(data)") 
        }.resume()
    }
}

struct ImageView: View {
    @ObservedObject var imageLoader:ImageLoader
    @State var image:UIImage = UIImage()
    
    
    init(withURL url:String) {
        imageLoader = ImageLoader(urlString:url)
    }
    
    var body: some View { 
        ZStack {  
            Color.orange
                .ignoresSafeArea()
            VStack {
                Text("Hello Crusty!")
                    .font(.system(size: 36, weight: .heavy, design: .rounded))
                Image(uiImage: image)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(width:200, height:200)
                    .onReceive(imageLoader.didChange) { data in
                        self.image = UIImage(data: data) ?? UIImage()
                    }
            }
        }
    }
}

let view = ImageView(withURL: "https://www.swiftbysundell.com/images/discover/swiftui/icon.png")

PlaygroundPage.current.setLiveView(view)

extension AsyncOperation {
    public enum State: String {
        case ready, executing, finished
        
        fileprivate var keyPath: String {
            "is\(rawValue.capitalized)"
        }
    }
}

open class AsyncOperation: Operation {
    // Create state management
    public var state = State.ready {
        willSet {
            willChangeValue(forKey: newValue.keyPath)
            willChangeValue(forKey: state.keyPath)
        }
        didSet {
            didChangeValue(forKey: oldValue.keyPath)
            didChangeValue(forKey: state.keyPath)
        }
    }
    
    // Override properties
    override open var isReady: Bool {
        super.isReady &amp;&amp; state == .ready
    }
    
    override open var isExecuting: Bool {
        state == .executing
    }
    
    override open var isFinished: Bool {
        state == .finished
    }
    
    override open func cancel() {
        state = .finished
    }
    override open var isAsynchronous: Bool {
        true
    }
    
    // Override start
    override open func start() {
        if isCancelled {
            state = .finished
            return
        }
        main()
        state = .executing
    }
    
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 3687}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
